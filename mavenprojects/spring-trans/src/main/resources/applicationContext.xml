<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--把数据库的配置信息，写在一个独立的文件，编译修改数据库的配置内容
    spring知道jdbc.properties文件的位置
    -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--spring会读取jdbc.properties中的内容，放到map中，下面的${key}，会通过key取出其中的值-->

    <!--声明数据源DataSource,作用是连接数据库的-->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!--set注入给DruidDataSource提供连接数据库信息-->
        <!--使用属性配置文件中的数据，语法${key}-->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.passwd}"/>
        <property name="maxActive" value="${jdbc.max}"/>
    </bean>

    <!--声明的是mybatis中提供的SqlSessionFactoryBean类，这个类内部创建SqlSessionFactory的-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--set注入，把数据库连接池赋给了dataSource属性-->
        <property name="dataSource" ref="myDataSource"/>
            <!--mybatis主配置文件的位置
                configLocation属性是Resource属性，读取配置文件
                它的赋值，使用value,指定文件的路径，使用classpath:表示文件的位置
            -->
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>

    <!--创建dao对象，使用SqlSession的getMapper(StudentDao.class)
         MapperScannerConfigurer:在内部调用getMapper()生成每个dao接口的代理对象
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定SqlSessionFactory对象的id-->
        <!--下面这行赋值用的是value,因为点击sqlSessionFactoryBeanName发现
                 setSqlSessionFactoryBeanName方法传的参数即为string类型
            而且MapperScannerConfigurer.class中private String sqlSessionFactoryBeanName;
        -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--指定包名，包名是dao接口所在的包名
            MapperScannerConfigurer会扫描这个包中的所有接口，把每个接口都执行一次getMapper()方法，
            得到每个接口的dao对象
            创建好的dao对象放入到spring的容器中的
        -->
        <property name="basePackage" value="org.example.dao"/>
        <!--多个包可写成：
        <property name="basePackage" value="org.example.dao,org.example.dao2"/>-->
    </bean>

    <!--声明service-->
    <bean id="buyService" class="org.example.service.impl.BuyGoodsServiceImpl">
        <property name="goodsDao" ref="goodsDao"/>
        <!--当时上面这行中的name中的studentDao爆红是因为StudentServiceImpl中没有set方法-->
        <property name="saleDao" ref="saleDao"/>
    </bean>

    <!--使用spring的事务处理-->
    <!--1.声明事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--连接的数据库，指定数据源-->
        <property name="dataSource" ref="myDataSource"/>
    </bean>

    <!--2，开启事务注解驱动，告诉spring使用注解管理事务，创建代理对象
    transaction-manager：事务管理器对象的id
    -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--========下面是大型项目中spring框架中提供的事务处理方案=================-->
    <!--
    1.声明事务管理器
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/>
    </bean>

    2.声明业务方法它的事务属性（隔离级别，传播行为，超时时间）
           id:自定义名称，表示<tx:advice> 和</tx:advice>之间的配置内容的
           transaction-manager:事务管理器对象的id
            （tx代表事务的意思）

    <tx:advice id="myAdvice" transaction-manager="transactionManager">
        tx:attributes:配置事务属性
        <tx:attributes>
            tx:method:给具体的方法配置事务属性，method可以有多个，分别给不同的方法设置事务属性
            name:方法名称，1）完整的方法名称，不带有包和类
                          2）方法可以使用通配符，*表示任意字符
            propagation:传播行为，枚举值
            isolation:隔离级别
            rollback-for:你指定的异常类名，全限定类名。发生异常一定回滚
            <tx:method name="buy" propagation="REQUIRED" isolation="DEFAULT"
             rollback-for="java.lang.NullPointerException,org.example.excep.NotEnoughException"/>
        </tx:attributes>
    </tx:advice>

    配置aop
    <aop:config>
        配置切入点表达式，指定哪些包中类，要使用事务
         id:切入点表达式的名称，唯一值
            expression:切入点表达式，指定那些类要使用事务，aspectj会创建代理对象

            eg:假设有org.example.service
                    com.crm.service
                    com.service
        <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>
        上面的切入点表达式表示所有包及其子包中的service包下的以及service子包下的所有类中的所有方法

        配置增强器：关联advice和pointcut
            advice-ref:通知，上面tx:advice那里的配置
            pointcut-ref:切入点表达式的id
        <aop:advisor advice-ref="myAdvice" pointcut-ref="servicePt"/>
    </aop:config>
    -->
</beans>